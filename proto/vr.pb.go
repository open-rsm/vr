// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vr.proto

package proto

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EntryType int32

const (
	Log       EntryType = 0
	Configure EntryType = 1
)

var EntryType_name = map[int32]string{
	0: "Log",
	1: "Configure",
}

var EntryType_value = map[string]int32{
	"Log":       0,
	"Configure": 1,
}

func (x EntryType) String() string {
	return proto.EnumName(EntryType_name, int32(x))
}

func (EntryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_689497d38df9f7a1, []int{0}
}

type MessageType int32

const (
	// client server
	Request MessageType = 0
	Reply   MessageType = 1
	// normal
	Prepare   MessageType = 2
	PrepareOk MessageType = 3
	Commit    MessageType = 4
	CommitOk  MessageType = 5
	// view change
	Change          MessageType = 6
	StartViewChange MessageType = 7
	DoViewChange    MessageType = 9
	StartView       MessageType = 10
	// recovering
	Recovery         MessageType = 11
	RecoveryResponse MessageType = 12
	// state transfer
	NewState MessageType = 13
	GetState MessageType = 14
	// Reconfiguration
	Reconfiguration     MessageType = 15
	StartEpoch          MessageType = 16
	EpochStarted        MessageType = 17
	CheckEpoch          MessageType = 18
	NewEpoch            MessageType = 19
	Heartbeat           MessageType = 20
	PrepareAppliedState MessageType = 21
)

var MessageType_name = map[int32]string{
	0:  "Request",
	1:  "Reply",
	2:  "Prepare",
	3:  "PrepareOk",
	4:  "Commit",
	5:  "CommitOk",
	6:  "Change",
	7:  "StartViewChange",
	9:  "DoViewChange",
	10: "StartView",
	11: "Recovery",
	12: "RecoveryResponse",
	13: "NewState",
	14: "GetState",
	15: "Reconfiguration",
	16: "StartEpoch",
	17: "EpochStarted",
	18: "CheckEpoch",
	19: "NewEpoch",
	20: "Heartbeat",
	21: "PrepareAppliedState",
}

var MessageType_value = map[string]int32{
	"Request":             0,
	"Reply":               1,
	"Prepare":             2,
	"PrepareOk":           3,
	"Commit":              4,
	"CommitOk":            5,
	"Change":              6,
	"StartViewChange":     7,
	"DoViewChange":        9,
	"StartView":           10,
	"Recovery":            11,
	"RecoveryResponse":    12,
	"NewState":            13,
	"GetState":            14,
	"Reconfiguration":     15,
	"StartEpoch":          16,
	"EpochStarted":        17,
	"CheckEpoch":          18,
	"NewEpoch":            19,
	"Heartbeat":           20,
	"PrepareAppliedState": 21,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_689497d38df9f7a1, []int{1}
}

type ConfigurationType int32

const (
	PostReplica   ConfigurationType = 0
	DeleteReplica ConfigurationType = 1
	UpdateReplica ConfigurationType = 2
)

var ConfigurationType_name = map[int32]string{
	0: "PostReplica",
	1: "DeleteReplica",
	2: "UpdateReplica",
}

var ConfigurationType_value = map[string]int32{
	"PostReplica":   0,
	"DeleteReplica": 1,
	"UpdateReplica": 2,
}

func (x ConfigurationType) String() string {
	return proto.EnumName(ConfigurationType_name, int32(x))
}

func (ConfigurationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_689497d38df9f7a1, []int{2}
}

// A viewstamp is a pair <view-number, op-number>, with the natural
// order: the view-number is considered first, and then the op-number
// for two viewstamps with the same view-number.
type ViewStamp struct {
	// The current view-number, initially 0.
	ViewNum uint64 `protobuf:"varint,1,opt,name=view_num,json=viewNum,proto3" json:"view_num,omitempty"`
	// The op-number assigned to the most recently received
	// request, initially 0.
	OpNum                uint64   `protobuf:"varint,2,opt,name=op_num,json=opNum,proto3" json:"op_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ViewStamp) Reset()         { *m = ViewStamp{} }
func (m *ViewStamp) String() string { return proto.CompactTextString(m) }
func (*ViewStamp) ProtoMessage()    {}
func (*ViewStamp) Descriptor() ([]byte, []int) {
	return fileDescriptor_689497d38df9f7a1, []int{0}
}
func (m *ViewStamp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewStamp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewStamp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewStamp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewStamp.Merge(m, src)
}
func (m *ViewStamp) XXX_Size() int {
	return m.Size()
}
func (m *ViewStamp) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewStamp.DiscardUnknown(m)
}

var xxx_messageInfo_ViewStamp proto.InternalMessageInfo

type Entry struct {
	Type                 EntryType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.EntryType" json:"type,omitempty"`
	ViewStamp            ViewStamp `protobuf:"bytes,2,opt,name=view_stamp,json=viewStamp,proto3" json:"view_stamp"`
	Data                 []byte    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Entry) Reset()         { *m = Entry{} }
func (m *Entry) String() string { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()    {}
func (*Entry) Descriptor() ([]byte, []int) {
	return fileDescriptor_689497d38df9f7a1, []int{1}
}
func (m *Entry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Entry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Entry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Entry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Entry.Merge(m, src)
}
func (m *Entry) XXX_Size() int {
	return m.Size()
}
func (m *Entry) XXX_DiscardUnknown() {
	xxx_messageInfo_Entry.DiscardUnknown(m)
}

var xxx_messageInfo_Entry proto.InternalMessageInfo

type Message struct {
	Type                 MessageType  `protobuf:"varint,1,opt,name=type,proto3,enum=proto.MessageType" json:"type,omitempty"`
	From                 uint64       `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   uint64       `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	LogNum               uint64       `protobuf:"varint,4,opt,name=log_num,json=logNum,proto3" json:"log_num,omitempty"`
	ViewStamp            ViewStamp    `protobuf:"bytes,5,opt,name=view_stamp,json=viewStamp,proto3" json:"view_stamp"`
	CommitNum            uint64       `protobuf:"varint,6,opt,name=commit_num,json=commitNum,proto3" json:"commit_num,omitempty"`
	Entries              []Entry      `protobuf:"bytes,7,rep,name=entries,proto3" json:"entries"`
	X                    uint64       `protobuf:"varint,8,opt,name=x,proto3" json:"x,omitempty"`
	Context              []byte       `protobuf:"bytes,9,opt,name=context,proto3" json:"context,omitempty"`
	Note                 uint64       `protobuf:"varint,10,opt,name=note,proto3" json:"note,omitempty"`
	AppliedState         AppliedState `protobuf:"bytes,11,opt,name=applied_state,json=appliedState,proto3" json:"applied_state"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_689497d38df9f7a1, []int{2}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type HardState struct {
	ViewStamp ViewStamp `protobuf:"bytes,1,opt,name=view_stamp,json=viewStamp,proto3" json:"view_stamp"`
	// The commit-number is the op-number of the most recently
	// commitNum operation.
	CommitNum            uint64   `protobuf:"varint,2,opt,name=commit_num,json=commitNum,proto3" json:"commit_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HardState) Reset()         { *m = HardState{} }
func (m *HardState) String() string { return proto.CompactTextString(m) }
func (*HardState) ProtoMessage()    {}
func (*HardState) Descriptor() ([]byte, []int) {
	return fileDescriptor_689497d38df9f7a1, []int{3}
}
func (m *HardState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HardState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HardState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HardState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HardState.Merge(m, src)
}
func (m *HardState) XXX_Size() int {
	return m.Size()
}
func (m *HardState) XXX_DiscardUnknown() {
	xxx_messageInfo_HardState.DiscardUnknown(m)
}

var xxx_messageInfo_HardState proto.InternalMessageInfo

type AppliedState struct {
	Applied              Applied  `protobuf:"bytes,1,opt,name=applied,proto3" json:"applied"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppliedState) Reset()         { *m = AppliedState{} }
func (m *AppliedState) String() string { return proto.CompactTextString(m) }
func (*AppliedState) ProtoMessage()    {}
func (*AppliedState) Descriptor() ([]byte, []int) {
	return fileDescriptor_689497d38df9f7a1, []int{4}
}
func (m *AppliedState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppliedState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppliedState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AppliedState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppliedState.Merge(m, src)
}
func (m *AppliedState) XXX_Size() int {
	return m.Size()
}
func (m *AppliedState) XXX_DiscardUnknown() {
	xxx_messageInfo_AppliedState.DiscardUnknown(m)
}

var xxx_messageInfo_AppliedState proto.InternalMessageInfo

type Applied struct {
	ViewStamp            ViewStamp          `protobuf:"bytes,1,opt,name=view_stamp,json=viewStamp,proto3" json:"view_stamp"`
	ConfigurationState   ConfigurationState `protobuf:"bytes,2,opt,name=configuration_state,json=configurationState,proto3" json:"configuration_state"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Applied) Reset()         { *m = Applied{} }
func (m *Applied) String() string { return proto.CompactTextString(m) }
func (*Applied) ProtoMessage()    {}
func (*Applied) Descriptor() ([]byte, []int) {
	return fileDescriptor_689497d38df9f7a1, []int{5}
}
func (m *Applied) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Applied) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Applied.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Applied) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Applied.Merge(m, src)
}
func (m *Applied) XXX_Size() int {
	return m.Size()
}
func (m *Applied) XXX_DiscardUnknown() {
	xxx_messageInfo_Applied.DiscardUnknown(m)
}

var xxx_messageInfo_Applied proto.InternalMessageInfo

type ConfigurationState struct {
	EpochNum         uint64 `protobuf:"varint,1,opt,name=epoch_num,json=epochNum,proto3" json:"epoch_num,omitempty"`
	OldConfiguration uint64 `protobuf:"varint,2,opt,name=old_configuration,json=oldConfiguration,proto3" json:"old_configuration,omitempty"`
	// The configuration. This is a sorted array containing
	// the IP addresses of each of the 2f + 1 replicas.
	Replicas             []uint64 `protobuf:"varint,3,rep,packed,name=replicas,proto3" json:"replicas,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigurationState) Reset()         { *m = ConfigurationState{} }
func (m *ConfigurationState) String() string { return proto.CompactTextString(m) }
func (*ConfigurationState) ProtoMessage()    {}
func (*ConfigurationState) Descriptor() ([]byte, []int) {
	return fileDescriptor_689497d38df9f7a1, []int{6}
}
func (m *ConfigurationState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfigurationState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfigurationState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfigurationState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigurationState.Merge(m, src)
}
func (m *ConfigurationState) XXX_Size() int {
	return m.Size()
}
func (m *ConfigurationState) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigurationState.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigurationState proto.InternalMessageInfo

type Configuration struct {
	Type                 ConfigurationType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.ConfigurationType" json:"type,omitempty"`
	Id                   uint64            `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	ReplicaNum           uint64            `protobuf:"varint,3,opt,name=replica_num,json=replicaNum,proto3" json:"replica_num,omitempty"`
	Context              []byte            `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Configuration) Reset()         { *m = Configuration{} }
func (m *Configuration) String() string { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()    {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_689497d38df9f7a1, []int{7}
}
func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(m, src)
}
func (m *Configuration) XXX_Size() int {
	return m.Size()
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("proto.EntryType", EntryType_name, EntryType_value)
	proto.RegisterEnum("proto.MessageType", MessageType_name, MessageType_value)
	proto.RegisterEnum("proto.ConfigurationType", ConfigurationType_name, ConfigurationType_value)
	proto.RegisterType((*ViewStamp)(nil), "proto.ViewStamp")
	proto.RegisterType((*Entry)(nil), "proto.Entry")
	proto.RegisterType((*Message)(nil), "proto.Message")
	proto.RegisterType((*HardState)(nil), "proto.HardState")
	proto.RegisterType((*AppliedState)(nil), "proto.AppliedState")
	proto.RegisterType((*Applied)(nil), "proto.Applied")
	proto.RegisterType((*ConfigurationState)(nil), "proto.ConfigurationState")
	proto.RegisterType((*Configuration)(nil), "proto.Configuration")
}

func init() { proto.RegisterFile("vr.proto", fileDescriptor_689497d38df9f7a1) }

var fileDescriptor_689497d38df9f7a1 = []byte{
	// 813 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0xdb, 0x46,
	0x10, 0x15, 0x29, 0x4a, 0x14, 0x47, 0x94, 0xbc, 0x1e, 0x25, 0x08, 0x93, 0xa2, 0x8a, 0xa1, 0x16,
	0x85, 0xe1, 0xa6, 0x0e, 0x90, 0xa2, 0xc7, 0x16, 0x68, 0x9c, 0xa0, 0x41, 0xd1, 0x3a, 0x06, 0xdd,
	0xf6, 0x1a, 0xac, 0xc9, 0x31, 0x4d, 0x98, 0xe2, 0xb2, 0xe4, 0xca, 0xb1, 0xfa, 0x05, 0x3d, 0xf7,
	0xd4, 0x4f, 0xf2, 0x31, 0xe7, 0x1e, 0x8a, 0xc6, 0xbd, 0xf7, 0x1b, 0x8a, 0x5d, 0x2e, 0x55, 0x32,
	0xee, 0x21, 0xf0, 0x49, 0x3b, 0x6f, 0x66, 0xdf, 0xbc, 0x79, 0x9c, 0x15, 0x8c, 0x2e, 0xca, 0xfd,
	0xa2, 0x14, 0x52, 0xe0, 0x40, 0xff, 0x3c, 0xf8, 0x2c, 0x49, 0xe5, 0xd9, 0xea, 0x64, 0x3f, 0x12,
	0xcb, 0xc7, 0x89, 0x48, 0xc4, 0x63, 0x0d, 0x9f, 0xac, 0x4e, 0x75, 0xa4, 0x03, 0x7d, 0xaa, 0x6f,
	0x2d, 0xbe, 0x04, 0xef, 0xa7, 0x94, 0x5e, 0x1f, 0x4b, 0xbe, 0x2c, 0xf0, 0x3e, 0x8c, 0x2e, 0x52,
	0x7a, 0xfd, 0x2a, 0x5f, 0x2d, 0x03, 0x6b, 0xc7, 0xda, 0x75, 0x42, 0x57, 0xc5, 0x87, 0xab, 0x25,
	0xde, 0x85, 0xa1, 0x28, 0x74, 0xc2, 0xd6, 0x89, 0x81, 0x28, 0x0e, 0x57, 0xcb, 0xc5, 0x25, 0x0c,
	0x9e, 0xe7, 0xb2, 0x5c, 0xe3, 0xc7, 0xe0, 0xc8, 0x75, 0x41, 0xfa, 0xda, 0xf4, 0x09, 0xab, 0xd9,
	0xf7, 0x75, 0xee, 0x87, 0x75, 0x41, 0xa1, 0xce, 0xe2, 0x17, 0x00, 0xba, 0x41, 0xa5, 0xda, 0x69,
	0xa6, 0xf1, 0xa6, 0x76, 0x23, 0xe3, 0xa9, 0x73, 0xf5, 0xe7, 0xc3, 0x5e, 0xe8, 0x5d, 0x6c, 0x74,
	0x21, 0x38, 0x31, 0x97, 0x3c, 0xe8, 0xef, 0x58, 0xbb, 0x7e, 0xa8, 0xcf, 0x8b, 0x7f, 0x6c, 0x70,
	0xbf, 0xa7, 0xaa, 0xe2, 0x09, 0xe1, 0x27, 0x9d, 0xe6, 0x68, 0x08, 0x4d, 0xb6, 0xd5, 0x1e, 0xc1,
	0x39, 0x2d, 0x45, 0x33, 0x82, 0x3e, 0xe3, 0x14, 0x6c, 0x29, 0x34, 0xb3, 0x13, 0xda, 0x52, 0xe0,
	0x3d, 0x70, 0x33, 0x91, 0xe8, 0x49, 0x1d, 0x0d, 0x0e, 0x33, 0x91, 0x28, 0x07, 0xba, 0xda, 0x07,
	0xef, 0xab, 0xfd, 0x43, 0x80, 0x48, 0x2c, 0x97, 0xa9, 0xd4, 0x94, 0x43, 0x4d, 0xe9, 0xd5, 0x88,
	0x62, 0x7d, 0x04, 0x2e, 0xe5, 0xb2, 0x4c, 0xa9, 0x0a, 0xdc, 0x9d, 0xfe, 0xee, 0xf8, 0x89, 0xdf,
	0xb6, 0xce, 0xd0, 0x35, 0x25, 0xe8, 0x83, 0x75, 0x19, 0x8c, 0x34, 0x87, 0x75, 0x89, 0x01, 0xb8,
	0x91, 0xc8, 0x25, 0x5d, 0xca, 0xc0, 0xd3, 0xce, 0x34, 0xa1, 0x1a, 0x34, 0x17, 0x92, 0x02, 0xa8,
	0x07, 0x55, 0x67, 0xfc, 0x0a, 0x26, 0xbc, 0x28, 0xb2, 0x94, 0x62, 0x35, 0x82, 0xa4, 0x60, 0xac,
	0x47, 0x98, 0x99, 0x7e, 0x5f, 0xd7, 0xb9, 0x63, 0x95, 0x32, 0x6d, 0x7d, 0xde, 0xc2, 0x16, 0x1c,
	0xbc, 0x17, 0xbc, 0xac, 0x83, 0x77, 0xcc, 0xb0, 0x6e, 0x67, 0x86, 0xfd, 0x8e, 0x19, 0x8b, 0x10,
	0xfc, 0xb6, 0x0c, 0xdc, 0x07, 0xd7, 0x48, 0x30, 0x2d, 0xa6, 0x5d, 0xb1, 0x8d, 0x3d, 0xa6, 0x68,
	0xb3, 0x27, 0x76, 0x6b, 0x4f, 0x7e, 0xb3, 0xc0, 0x35, 0xe5, 0xb7, 0x55, 0x7d, 0x04, 0xb3, 0x48,
	0xe4, 0xa7, 0x69, 0xb2, 0x2a, 0xb9, 0x4c, 0x45, 0x6e, 0xfc, 0xab, 0xd7, 0xf7, 0xbe, 0xb9, 0x7f,
	0xd0, 0xae, 0x68, 0xbb, 0x88, 0xd1, 0x8d, 0xcc, 0xe2, 0x17, 0xc0, 0x9b, 0xf5, 0xf8, 0x01, 0x78,
	0x54, 0x88, 0xe8, 0xac, 0xf5, 0xfe, 0x46, 0x1a, 0x50, 0x8b, 0xf2, 0x29, 0x6c, 0x8b, 0x2c, 0x7e,
	0xd5, 0x21, 0x33, 0x0e, 0x32, 0x91, 0xc5, 0x1d, 0x3a, 0x7c, 0x00, 0xa3, 0x92, 0x8a, 0x2c, 0x8d,
	0x78, 0x15, 0xf4, 0x77, 0xfa, 0x8a, 0xa8, 0x89, 0x17, 0xbf, 0x5a, 0x30, 0xe9, 0x56, 0x3f, 0xea,
	0x3c, 0x9f, 0xe0, 0xff, 0x06, 0x6a, 0x3d, 0xa2, 0x29, 0xd8, 0x69, 0x6c, 0x3a, 0xdb, 0x69, 0x8c,
	0x0f, 0x61, 0x6c, 0xb8, 0xb5, 0xee, 0xfa, 0x25, 0x81, 0x81, 0x94, 0xf2, 0xd6, 0x9a, 0x3a, 0x9d,
	0x35, 0xdd, 0xfb, 0x08, 0xbc, 0xcd, 0x3f, 0x04, 0xba, 0xd0, 0xff, 0x4e, 0x24, 0xac, 0x87, 0x13,
	0xf0, 0x9a, 0xde, 0xc4, 0xac, 0xbd, 0x3f, 0x6c, 0x18, 0xb7, 0x9e, 0x32, 0x8e, 0xc1, 0x0d, 0xe9,
	0xe7, 0x15, 0x55, 0x92, 0xf5, 0xd0, 0x83, 0x41, 0x48, 0x45, 0xb6, 0x66, 0x96, 0xc2, 0x8f, 0x4a,
	0x2a, 0x78, 0x49, 0xcc, 0x56, 0x1c, 0x26, 0x78, 0x79, 0xce, 0xfa, 0x08, 0x30, 0x3c, 0xd0, 0x5b,
	0xc6, 0x1c, 0xf4, 0x61, 0x54, 0x9f, 0x5f, 0x9e, 0xb3, 0x81, 0xce, 0x9c, 0xf1, 0x3c, 0x21, 0x36,
	0xc4, 0x19, 0x6c, 0x1d, 0x4b, 0x5e, 0x4a, 0xb5, 0x0a, 0x06, 0x74, 0x91, 0x81, 0xff, 0x4c, 0xb4,
	0x10, 0x4f, 0x71, 0x6f, 0xca, 0x18, 0x28, 0xbe, 0x90, 0x22, 0x71, 0x41, 0xe5, 0x9a, 0x8d, 0xf1,
	0x0e, 0xb0, 0x26, 0x0a, 0xa9, 0x2a, 0x44, 0x5e, 0x11, 0xf3, 0x55, 0xcd, 0xa1, 0xde, 0x26, 0x49,
	0x6c, 0xa2, 0xa2, 0x6f, 0x48, 0xd6, 0xd1, 0x54, 0x75, 0x55, 0x37, 0x5a, 0x66, 0xb3, 0x2d, 0x9c,
	0x02, 0xe8, 0x1e, 0xcf, 0xd5, 0xe7, 0x67, 0x4c, 0xa9, 0xd0, 0x47, 0x0d, 0x52, 0xcc, 0xb6, 0x55,
	0xc5, 0xc1, 0x19, 0x45, 0xe7, 0x75, 0x05, 0x9a, 0x16, 0x75, 0x34, 0x53, 0x1a, 0x5f, 0x10, 0x2f,
	0xe5, 0x09, 0x71, 0xc9, 0xee, 0xe0, 0x3d, 0x98, 0x19, 0x3b, 0xda, 0xef, 0x8b, 0xdd, 0xdd, 0xfb,
	0x16, 0xb6, 0x6f, 0x7c, 0x67, 0xdc, 0x82, 0xf1, 0x91, 0xa8, 0x64, 0x58, 0x7f, 0x42, 0xd6, 0xc3,
	0x6d, 0x98, 0x3c, 0xa3, 0x8c, 0x24, 0x35, 0x90, 0xa5, 0xa0, 0x1f, 0x8b, 0x98, 0xff, 0x07, 0xd9,
	0x4f, 0x83, 0xab, 0xb7, 0xf3, 0xde, 0x9b, 0xb7, 0xf3, 0xde, 0xd5, 0xf5, 0xdc, 0x7a, 0x73, 0x3d,
	0xb7, 0xfe, 0xba, 0x9e, 0x5b, 0xbf, 0xff, 0x3d, 0xef, 0x9d, 0x0c, 0xf5, 0x46, 0x7d, 0xfe, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x9e, 0x0d, 0x55, 0xad, 0x06, 0x00, 0x00,
}

func (m *ViewStamp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewStamp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ViewNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.ViewNum))
	}
	if m.OpNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.OpNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.Type))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintVr(dAtA, i, uint64(m.ViewStamp.Size()))
	n1, err := m.ViewStamp.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVr(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.Type))
	}
	if m.From != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.From))
	}
	if m.To != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.To))
	}
	if m.LogNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.LogNum))
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintVr(dAtA, i, uint64(m.ViewStamp.Size()))
	n2, err := m.ViewStamp.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.CommitNum != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.CommitNum))
	}
	if len(m.Entries) > 0 {
		for _, msg := range m.Entries {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintVr(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.X != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.X))
	}
	if len(m.Context) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintVr(dAtA, i, uint64(len(m.Context)))
		i += copy(dAtA[i:], m.Context)
	}
	if m.Note != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.Note))
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintVr(dAtA, i, uint64(m.AppliedState.Size()))
	n3, err := m.AppliedState.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HardState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HardState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintVr(dAtA, i, uint64(m.ViewStamp.Size()))
	n4, err := m.ViewStamp.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.CommitNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.CommitNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AppliedState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppliedState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintVr(dAtA, i, uint64(m.Applied.Size()))
	n5, err := m.Applied.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVr(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Applied) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Applied) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintVr(dAtA, i, uint64(m.ViewStamp.Size()))
	n6, err := m.ViewStamp.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x12
	i++
	i = encodeVarintVr(dAtA, i, uint64(m.ConfigurationState.Size()))
	n7, err := m.ConfigurationState.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ConfigurationState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfigurationState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.EpochNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.EpochNum))
	}
	if m.OldConfiguration != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.OldConfiguration))
	}
	if len(m.Replicas) > 0 {
		dAtA9 := make([]byte, len(m.Replicas)*10)
		var j8 int
		for _, num := range m.Replicas {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVr(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Configuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configuration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.Type))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.Id))
	}
	if m.ReplicaNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVr(dAtA, i, uint64(m.ReplicaNum))
	}
	if len(m.Context) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVr(dAtA, i, uint64(len(m.Context)))
		i += copy(dAtA[i:], m.Context)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintVr(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ViewStamp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewNum != 0 {
		n += 1 + sovVr(uint64(m.ViewNum))
	}
	if m.OpNum != 0 {
		n += 1 + sovVr(uint64(m.OpNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Entry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovVr(uint64(m.Type))
	}
	l = m.ViewStamp.Size()
	n += 1 + l + sovVr(uint64(l))
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovVr(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovVr(uint64(m.Type))
	}
	if m.From != 0 {
		n += 1 + sovVr(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovVr(uint64(m.To))
	}
	if m.LogNum != 0 {
		n += 1 + sovVr(uint64(m.LogNum))
	}
	l = m.ViewStamp.Size()
	n += 1 + l + sovVr(uint64(l))
	if m.CommitNum != 0 {
		n += 1 + sovVr(uint64(m.CommitNum))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovVr(uint64(l))
		}
	}
	if m.X != 0 {
		n += 1 + sovVr(uint64(m.X))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovVr(uint64(l))
	}
	if m.Note != 0 {
		n += 1 + sovVr(uint64(m.Note))
	}
	l = m.AppliedState.Size()
	n += 1 + l + sovVr(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HardState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ViewStamp.Size()
	n += 1 + l + sovVr(uint64(l))
	if m.CommitNum != 0 {
		n += 1 + sovVr(uint64(m.CommitNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AppliedState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Applied.Size()
	n += 1 + l + sovVr(uint64(l))
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovVr(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Applied) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ViewStamp.Size()
	n += 1 + l + sovVr(uint64(l))
	l = m.ConfigurationState.Size()
	n += 1 + l + sovVr(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConfigurationState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNum != 0 {
		n += 1 + sovVr(uint64(m.EpochNum))
	}
	if m.OldConfiguration != 0 {
		n += 1 + sovVr(uint64(m.OldConfiguration))
	}
	if len(m.Replicas) > 0 {
		l = 0
		for _, e := range m.Replicas {
			l += sovVr(uint64(e))
		}
		n += 1 + sovVr(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Configuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovVr(uint64(m.Type))
	}
	if m.Id != 0 {
		n += 1 + sovVr(uint64(m.Id))
	}
	if m.ReplicaNum != 0 {
		n += 1 + sovVr(uint64(m.ReplicaNum))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovVr(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVr(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVr(x uint64) (n int) {
	return sovVr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ViewStamp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewStamp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewStamp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewNum", wireType)
			}
			m.ViewNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpNum", wireType)
			}
			m.OpNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= EntryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ViewStamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVr
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogNum", wireType)
			}
			m.LogNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ViewStamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitNum", wireType)
			}
			m.CommitNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, Entry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVr
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context[:0], dAtA[iNdEx:postIndex]...)
			if m.Context == nil {
				m.Context = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			m.Note = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Note |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AppliedState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HardState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HardState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HardState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ViewStamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitNum", wireType)
			}
			m.CommitNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppliedState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppliedState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppliedState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applied", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Applied.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVr
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Applied) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Applied: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Applied: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ViewStamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigurationState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVr
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConfigurationState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfigurationState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfigurationState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfigurationState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNum", wireType)
			}
			m.EpochNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldConfiguration", wireType)
			}
			m.OldConfiguration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldConfiguration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVr
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Replicas = append(m.Replicas, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowVr
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthVr
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthVr
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Replicas) == 0 {
					m.Replicas = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowVr
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Replicas = append(m.Replicas, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Configuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Configuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Configuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ConfigurationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaNum", wireType)
			}
			m.ReplicaNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVr
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context[:0], dAtA[iNdEx:postIndex]...)
			if m.Context == nil {
				m.Context = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVr
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthVr
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVr
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVr(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthVr
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVr = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVr   = fmt.Errorf("proto: integer overflow")
)
